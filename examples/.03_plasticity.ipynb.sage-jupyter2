{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":78299136},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"8ed44e","input":"# Import modules\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom brian2_loihi import *","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"127e0a","input":"\"\"\"\nDefine some parameters\n\"\"\"\n\nruntime = 1000\ngen_spike_prob = 0.05","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"a80ba3","input":"\"\"\"\nDefine neuron\n\"\"\"\n\n# Define a single neuron\nneuron = LoihiNeuronGroup(\n    N=1,\n    refractory=2,\n    threshold_v_mant=250,\n    decay_v=4096,\n    decay_I=4096\n)","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"a19ebc","input":"\"\"\"\nDefine input generators and spike times\n\"\"\"\n\n# Spiking generator for pre-synaptic spikes\nrand_pre = np.random.rand(runtime)\ntimes_pre = np.where(rand_pre < gen_spike_prob)[0]\nindices_pre = np.zeros(len(times_pre)).astype(int)\ngen_pre = LoihiSpikeGeneratorGroup(1, indices_pre, times_pre)\n\n# Spiking generator for post-synaptic spikes\nrand_post = np.random.rand(runtime)\ntimes_post = np.where(rand_post < gen_spike_prob)[0]\nindices_post = np.zeros(len(times_post)).astype(int)\ngen_post = LoihiSpikeGeneratorGroup(1, indices_post, times_post)","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"2e8f94","input":"\"\"\"\nDefine synapses and connect parts\n\"\"\"\n\n# Create an E-STDP learning rule and connect the pre-synaptic generator to the neuron\nsyn_plastic = LoihiSynapses(\n    gen_pre,\n    neuron,\n    dw='2^-3*x1*y0 - 2^-3*y1*x0',\n    imp_x1=127,\n    tau_x1=10,\n    imp_y1=127,\n    tau_y1=10,\n    sign_mode=synapse_sign_mode.EXCITATORY\n)\nsyn_plastic.connect()\nsyn_plastic.w = 128\n\n# Connect the post-synaptic generator with the neuron with a fixed connection\nsyn_static = LoihiSynapses(\n    gen_post,\n    neuron,\n    sign_mode=synapse_sign_mode.EXCITATORY\n)\nsyn_static.connect()\nsyn_static.w = 254","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"dd1293","input":"\"\"\"\nDefine probes using state/spike monitors\n\"\"\"\n\n# Define spike monitor for neuron\nmon_s = LoihiSpikeMonitor(neuron)\n\n# Define state monitor for plastic synapse\nmon_w = LoihiStateMonitor(syn_plastic, 'w')","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"df08f3","input":"\"\"\"\nDefine a network and perform simulation\n\"\"\"\n\n# NOTE: It is important to use the LoihiNetwork,\n#       using Brian's magic network is not provided\nnet = LoihiNetwork(\n    neuron,\n    gen_pre,\n    gen_post,\n    syn_plastic,\n    syn_static,\n    mon_s,\n    mon_w\n)\n\n# Run the simulation\nnet.run(runtime, report='text')","output":{"0":{"name":"stdout","output_type":"stream","text":"Starting simulation at t=0. s for a duration of 1. s\n"},"1":{"name":"stdout","output_type":"stream","text":"1. s (100%) simulated in < 1s\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"2953f3","input":"\"\"\"\nPlot weight over time\n\"\"\"\n\n# Plot weight of the plastic synapse\nplt.plot(mon_w.w[0])\nplt.ylim((-5,260))\nplt.xlabel('time')\nplt.ylabel('weight')\npl = plt.show()","output":{"0":{"data":{"image/png":"7b8fb8d5a154584edca8d937434b993cba6d35c2","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":8,"metadata":{"image/png":{"height":263,"width":390}},"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"27db45","input":"\"\"\"\nPlot STDP learning window\n\"\"\"\n\n# Weight differences\nwgt_diff = np.diff(mon_w.w[0])\n# Indices of non-zero weight differences\nwgt_diff_inds = wgt_diff.nonzero()[0]\n# Closest pre and post spike times\nclosest = lambda times : np.array([ times[np.where(times <= t)][-1] for t in wgt_diff_inds+1 ])\n# Pre/Post deltas\npost_pre = closest(times_post) - closest(times_pre)\n\n# Plot STDP learning window\nplt.scatter(post_pre, wgt_diff[wgt_diff_inds])\nplt.xlabel('post - pre')\nplt.ylabel('weight difference')\npl = plt.show()","output":{"0":{"data":{"image/png":"2b93dd41075d4e58f0728020be8698ef0b7ac9b9","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":9,"metadata":{"image/png":{"height":263,"width":392}},"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"id":0,"time":1619705655820,"type":"user"}
{"last_load":1619705656292,"type":"file"}