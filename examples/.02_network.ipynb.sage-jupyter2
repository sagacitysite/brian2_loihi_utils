{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":78307328},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"7470c3","input":"# Import modules\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom brian2_loihi import *","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"6a0c9b","input":"\"\"\"\nPlot results\n\"\"\"\n\n# Spikes of excitatory neuron group\nplt.scatter(mon_spike_ex.t, mon_spike_ex.i)\nplt.title('Spike trains')\nplt.xlabel('time')\nplt.ylabel('# neuron')\npl = plt.show()","output":{"0":{"data":{"image/png":"9852358234c5767026b63f1feeb2dcfe55d2183a","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":277,"width":390}},"output_type":"execute_result"}},"pos":8,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"bd0523","input":"\"\"\"\nDefine some parameters\n\"\"\"\n\nruntime = 400\nn_ex = 400\nn_in = 100\np_connectivity = 0.05\nn_noise_gens = 40","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"808d12","input":"\"\"\"\nDefine excitatory and inhibitory neuron group\n\"\"\"\n\n# Excitatory neuron group\ngroup_ex = LoihiNeuronGroup(\n    400,\n    refractory=2,\n    threshold_v_mant=200,\n    decay_v=1024,\n    decay_I=2048\n)\n\n# Inhibitory neuron group\ngroup_in = LoihiNeuronGroup(\n    100,\n    refractory=2,\n    threshold_v_mant=200,\n    decay_v=1024,\n    decay_I=2048\n)","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"711662","input":"\"\"\"\nDefine input generators and spike times\n\"\"\"\n\n# Ranomdly generate spikes for noise generators\nrand = np.random.rand(n_noise_gens, runtime)\n\n# Define neuron indices and spike times\nneuron_indices, spike_times = np.where(rand < 0.05)\n\n# Define spike generators\ngen = LoihiSpikeGeneratorGroup(n_noise_gens, neuron_indices, spike_times)","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"4709ef","input":"\"\"\"\nDefine functions for drawing connections and lognormal weights\n\"\"\"\n\ndef drawConnections(n_source, n_target, avoid_self=True):\n    # Draw random values\n    rand = np.random.rand(n_source, n_target)\n    # If avoid_self is true, remove diagonal\n    # But only apply if n_source = n_target\n    if (avoid_self and n_source == n_target):\n        np.fill_diagonal(rand, 1)\n\n    # Return sources and targets\n    return np.where(rand < p_connectivity)\n\ndef drawWeights(sources):\n    # Get length of sources\n    n = len(sources)\n    # Distribution parameters according to Teramae, Tsubo & Fukai (2012)\n    m = np.log(0.2) + 1.0\n    s = 1.0\n    # Draw weight from lognormal distribution\n    weights = (np.random.lognormal(m, s, n)*(255/20.)).astype(int)\n\n    # Clip values to meet weight range\n    return np.clip(weights, 1, 255)","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"a68cd6","input":"\"\"\"\nDefine synapses and connect reservoir\n\"\"\"\n\n# Connect spike generator to ex\nsources, targets = np.where(np.random.rand(n_noise_gens, n_ex) < 0.1)\nsyn_gen = LoihiSynapses(gen, group_ex, sign_mode=synapse_sign_mode.EXCITATORY)\nsyn_gen.connect(i=sources, j=targets)\nsyn_gen.w = (np.random.rand(len(sources))*50).astype(int)\n\n# Connect ex ex\nsources, targets = drawConnections(n_ex, n_ex)\nsyn_exex = LoihiSynapses(group_ex, group_ex, sign_mode=synapse_sign_mode.EXCITATORY)\nsyn_exex.connect(i=sources, j=targets)\nsyn_exex.w = drawWeights(sources)\n\n# Connect ex in\nsources, targets = drawConnections(n_ex, n_in)\nsyn_exin = LoihiSynapses(group_ex, group_in, sign_mode=synapse_sign_mode.EXCITATORY)\nsyn_exin.connect(i=sources, j=targets)\nsyn_exin.w = drawWeights(sources)\n\n# Connect in ex\nsources, targets = drawConnections(n_in, n_ex)\nsyn_inex = LoihiSynapses(group_in, group_ex, sign_mode=synapse_sign_mode.INHIBITORY)\nsyn_inex.connect(i=sources, j=targets)\nsyn_inex.w = -drawWeights(sources)\n\n# Connect in in\nsources, targets = drawConnections(n_in, n_in)\nsyn_inin = LoihiSynapses(group_ex, group_in, sign_mode=synapse_sign_mode.INHIBITORY)\nsyn_inin.connect(i=sources, j=targets)\nsyn_inin.w = -drawWeights(sources)","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"3d1d61","input":"\"\"\"\nDefine probes using spike monitors\n\"\"\"\n\n# Define spike monitors for excitatory neuron group\nmon_spike_ex = LoihiSpikeMonitor(group_ex)","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"5a9395","input":"\"\"\"\nDefine a network and perform simulation\n\"\"\"\n\n# NOTE: It is important to use the LoihiNetwork,\n#       using Brian's magic network is not provided\nnet = LoihiNetwork(\n    group_ex,\n    group_in,\n    gen,\n    syn_gen,\n    syn_exex,\n    syn_exin,\n    syn_inex,\n    syn_inin,\n    mon_spike_ex\n)\n\n# Run the simulation\nnet.run(runtime, report='text')","output":{"0":{"name":"stdout","output_type":"stream","text":"Starting simulation at t=0. s for a duration of 0.4 s\n"},"1":{"name":"stdout","output_type":"stream","text":"0.4 s (100%) simulated in < 1s\n"}},"pos":7,"type":"cell"}
{"id":0,"time":1619705657558,"type":"user"}
{"last_load":1619705657943,"type":"file"}