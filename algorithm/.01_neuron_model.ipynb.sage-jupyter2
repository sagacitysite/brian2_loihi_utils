{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":87207936},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1619705601453,"exec_count":1,"id":"0c62f4","input":"import matplotlib.pyplot as plt\nimport numpy as np","kernel":"python3","no_halt":true,"pos":0,"start":1619705601440,"state":"done","type":"cell"}
{"cell_type":"code","end":1619705601623,"exec_count":2,"id":"c88e03","input":"\"\"\"\nAlgorithm for emulating the Loihi neuron model\n\"\"\"\n# Notes\n#  * The refactory period is not considered\n#  * The calculation of the actual weight consideres no restrictions\n\n# Define seed\nnp.random.seed(1)\n\n# Define round away from zero\ndef rnd(val):\n    rounded = int(np.sign(val)*np.ceil(np.abs(val)))\n    return rounded\n\n# Define max time (runtime)\nt_max = 100\n\n# Define spike input\np_spike = 0.25  # probabilty of an input spike at any given time step\nS = (np.random.rand(t_max) <= p_spike).astype(int)  # array, 1 for spike, 0 else\n\n# Define weight\ntheta = 0  # can be -8 to +7\nw = 10 # can be -256 to +255\nJ = w * 2**(6.0 + theta)\n# Note that the actual weight J on Loihi can differ from the here defined J\n# depending on: weight bits, weight exponent, synapse sign mode and memory limits\n\n# Define threshold\nv_th_mant = 11 # can be 0 to 131071\nv_th = v_th_mant * 2**6\n\n# Define voltage and current decay\ndecay_v = 2048\n_tau_v = decay_v/2**12  # equals 1/tau_v\ndecay_I = 2048\n_tau_I = decay_I/2**12  # equals 1/tau_I\n\n# Initialise read outs\nI, v, spks = np.zeros(t_max, dtype=int), np.zeros(t_max, dtype=int), np.zeros(t_max, dtype=int)\n\nfor t in range(1, t_max):\n\n    # Spike input\n    s = S[t]\n\n    # Update and read synaptic input\n    I[t] = I[t-1] - rnd(_tau_I * I[t-1]) + J*s\n\n    # Update and read voltage\n    v[t] = v[t-1] - rnd(_tau_v * v[t-1]) + I[t]\n\n    # Check threshold\n    if v[t] > v_th:\n        # Read spike\n        spks[t] = 1\n        # Reset voltage\n        v[t] = 0","kernel":"python3","no_halt":true,"pos":1,"start":1619705601465,"state":"done","type":"cell"}
{"cell_type":"code","end":1619705602257,"exec_count":3,"id":"42da85","input":"\"\"\"\nPlot results\n\"\"\"\n\ntime = np.arange(0,t_max,1)\n\n# Plot input spike train\nfig, axs = plt.subplots(4, 1, figsize=(8,6))\naxs[0].scatter(time, S, marker=\".\")\naxs[0].set_xticks([])\naxs[0].set_ylim(0.9,1.1)\naxs[0].set_yticks([])\naxs[0].set_ylabel(\"Input spikes\")\n\n# Plot synaptic input (current)\naxs[1].plot(time, I)\naxs[1].set_xticks([])\naxs[1].set_yticks([])\naxs[1].set_ylabel(\"Synaptic input\")\n\n# Plot voltage\naxs[2].plot(time, v)\naxs[2].axhline(v_th, linestyle=\"--\", color=\"gray\")\naxs[2].set_xticks([])\naxs[2].set_yticks([])\naxs[2].set_ylabel(\"Voltage\")\n\n# Plot output spike train\naxs[3].scatter(time, spks, marker=\".\")\naxs[3].set_xlabel(\"Time step\")\naxs[3].set_ylim(0.9,1.1)\naxs[3].set_yticks([])\naxs[3].set_ylabel(\"Output spikes\")\n\nfig.tight_layout()\nplt.show()","kernel":"python3","no_halt":true,"output":{"0":{"data":{"image/png":"a21f448ca9cebb196e995df5a107b9d8546386b6","text/plain":"<Figure size 576x432 with 4 Axes>"},"metadata":{"image/png":{"height":422,"width":566}}}},"pos":2,"start":1619705601671,"state":"done","type":"cell"}
{"id":0,"time":1619705591568,"type":"user"}
{"last_load":1619705591917,"type":"file"}